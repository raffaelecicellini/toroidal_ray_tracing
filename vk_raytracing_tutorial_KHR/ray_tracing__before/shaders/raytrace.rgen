#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require


#include "host_device.h"
#include "raycommon.glsl"   // this gives problems

layout(set = 1, binding = eGlobals) uniform _GlobalUniforms{ GlobalUniforms uni; }; // new binding to allow shader to access camera matrices, set = 1 since it is in the second descSet passed to rtPipeline

layout(location = 0) rayPayloadEXT hitPayload prd;  // used so that hit/miss shaders can return some information

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 3, set = 0) buffer _RenderedBuffer{ RenderedData rData[]; };   // binding to allow shader write stuff for rendered pixel 
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

void main() 
{
    // Experimenting for toroidal rendering
    const float rho = pcRay.rho;
    const float x = gl_LaunchIDEXT.x;
    const float y = gl_LaunchIDEXT.y;
    const float d_alfa = 360.0f / gl_LaunchSizeEXT.x;
    const float d_beta = 360.0f / gl_LaunchSizeEXT.y;
    float alfa = d_alfa * x; // angle around the big circle
    float beta = d_beta * y; // angle around each small circle
    float omega = 0.0f;
    float theta = 0.0f;
    vec3 temp;
    vec2 dir;

    // Need to introduce an offset depending on where the camera center is (= where the subject is looking) + to have point where sub is looking at center of screen
    // Compute offset angle between straight direction (1,0,0) and camera center
    vec4 eye = uni.viewInverse * vec4(0, 0, 0, 1);  // obtain camera position in world coord

    temp = vec3(uni.center - eye.xyz);  // obtain sight direction and normalize it 
    dir = normalize(vec2(temp.x, temp.z));
    omega = degrees(acos(dot(vec2(1.0f, 0.0f), dir))); // compute angle between straight-dir sight and current-dir sight on plane x-z
    if(temp.z < 0){
        omega = 360.0f - omega; // acos gives angle between 0 and 180, we want the other angle to perform a complete cycle if it is the case
    }

    if(eye.y != uni.center.y){
        temp = vec3(eye.x + rho*cos(radians(omega)), eye.y, eye.z + rho*sin(radians(omega)));  // position of first ray origin to compute offset on beta
        temp = vec3(uni.center - temp);
        dir = normalize(vec2(temp.x, temp.y));
        theta = degrees(acos(dot(vec2(1.0f, 0.0f), dir)));
        if(temp.y < 0){
            theta = 360.0f - theta;
        }
    }

    // Compute origin and direction of each ray for toroidal rendering
    vec4 origin = vec4(eye.x + rho*cos(radians(alfa + omega)), eye.y, eye.z + rho*sin(radians(alfa + omega)), 1);
    vec4 direction = vec4(cos(radians(alfa + omega))*cos(radians(beta + theta)), sin(radians(beta + theta)), sin(radians(alfa + omega))*cos(radians(beta + theta)), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;   // flag indicating that all geometry will be considered opaque
    // min and max distance of potential intersections, useful to reduce costs if intersections before or after don't matter
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.depth = 0;
    prd.hitValue = vec3(0);
    prd.attenuation = vec3(1.f, 1.f, 1.f);
    vec3 hitValue = vec3(0);
    vec3 hitPosition = vec3(0);
    prd.done = 1;
    prd.rayOrigin = origin.xyz;
    prd.rayDir = direction.xyz;
    rData[gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y].rayOrigin = origin;
    rData[gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y].rayDir = direction;

    for(;;)
    {
        traceRayEXT(topLevelAS,     // acceleration structure to search for hits in
            rayFlags,       // rayFlags controlling raytrace
            0xFF,           // cullMask, instance mask binary ANDed with this one and intersection is skipped if result is 0
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex, index of miss shader to call if no intersection is found
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location=0), location of the payload declared in this shader (this is because the function is not type-polymorphic, so we pass the location and not the payload itself)
            // Scope of the location is just within one invocation of one shader (this requires a GPU stack in case of recursive calls)
            // No requirement that the location of callee's incoming payload match payload argument the caller passed to the function, different from in/out variables in frag/vertex shaders
        );

        hitValue += prd.hitValue * prd.attenuation;

        if(prd.depth == 0)
        {
            hitPosition = prd.hitPosition;
        }

        prd.depth++;
        if(prd.done == 1 || prd.depth >= pcRay.maxDepth)
        {
            break;
        }

        origin.xyz = prd.rayOrigin;
        direction.xyz = prd.rayDir;
        prd.done = 1;   // Will stop if a reflective material is not hit
    }

    // Save data to buffer
    rData[gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y].color = vec4(hitValue, 1.0);
    rData[gl_LaunchIDEXT.x*gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y].pos = vec4(hitPosition, 1.0);

    // Write pixel to image
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}
